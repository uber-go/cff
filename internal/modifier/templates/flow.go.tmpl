{{- $context := import "context" -}}
{{- $cff := import "go.uber.org/cff" -}}
{{- $flow := .Flow -}}

func {{ .FuncExpr }}(
	{{- with .FuncArgs }}
		ctx {{ type .CtxType }},
		{{ template "args" . }}
	{{- end -}}
) error {
	{{ template "modifierProviders" .FuncArgs.Values -}}

	{{ with .Flow }}

	{{- range .Inputs }}
		var v{{ typeHash .Type }} {{ type .Type }} = {{ expr .Node }}
	{{- end }}
	emitter := {{ template "buildEmitter" $flow }}

	var (
		flowInfo = &{{ $cff }}.FlowInfo{
			{{ with $flow.Instrument -}}
				Name: {{ expr .Name }},
			{{ end -}}
			File: {{ quote $flow.PosInfo.File}},
			Line: {{ $flow.PosInfo.Line }},
			Column: {{ $flow.PosInfo.Column}},
		}
		{{ if $flow.Instrument -}}
			flowEmitter = emitter.FlowInit(flowInfo)
		{{- else -}}
			flowEmitter = {{ $cff }}.NopFlowEmitter()
		{{- end }}

		schedInfo = &{{ $cff }}.SchedulerInfo{
			Name: flowInfo.Name,
			Directive: {{ $cff }}.FlowDirective,
			File: flowInfo.File,
			Line: flowInfo.Line,
			Column: flowInfo.Column,
		}

		// possibly unused
		_ = flowInfo
	)

	startTime := {{ import "time" }}.Now()
	defer func() { flowEmitter.FlowDone(ctx, time.Since(startTime)) }()

	schedEmitter := emitter.SchedulerInit(schedInfo)

	sched := {{ $cff }}.NewScheduler(
		{{ $cff }}.SchedulerParams{
			{{ with .Concurrency -}} Concurrency: {{ expr . }}, {{ end -}}
			Emitter: schedEmitter,
		},
	)

	var tasks []*{{ template "task" }}

	{{ range .TopoFuncs }}
		{{ template "flow_func.go.tmpl" . }}
	{{ end }}

	if err := sched.Wait(ctx); err != nil {
		flowEmitter.FlowError(ctx, err)
		return err
	}

	{{ range .Outputs }}
		*({{ expr .Node }}) = v{{ typeHash .Type }} // {{ typeName .Type }}
	{{ end }}

	flowEmitter.FlowSuccess(ctx)
	return nil
	{{- end -}}
}

{{- define "args" -}}
	{{- $cff := import "go.uber.org/cff" -}}
	{{ range .Args }}
		{{- if .Types }} {{ .Name }} func() ({{ range .Types }} {{ type . }}, {{ end }}) {{ else }} _ {{ $cff }}.Option {{ end }},
	{{ end }}
{{- end -}}

{{- define "modifierProviders" -}}
	{{ range . }}
		{{- $last := .LastIdx -}}
		{{ range $index, $element := .Exprs }} {{ expr . }} {{ if ne $index $last }}, {{ end }} {{ end }} := {{ .ModifierID }}()
		{{ range $index, $element := .Exprs }} _ {{ if ne $index $last }}, {{ end }} {{ end }} = {{ range $index, $element := .Exprs }} {{ expr . }} {{ if ne $index $last }}, {{ end }} {{ end }} // possibly unused.
	{{ end }}
{{- end -}}

{{- /* vim:set ft=gotexttmpl noet: */ -}}
