{{- $context := import "context" -}}
{{- $cff := import "go.uber.org/cff" -}}
{{- $t := printf "mapTask%d" .Serial -}}

{{ if .MapEndFn -}}
{{ $t }}Jobs := make([]*{{ $cff }}.ScheduledJob, 0, len({{ expr .Map }}))
{{ end -}}

// {{ .PosInfo.File }}:{{ .PosInfo.Line }}:{{ .PosInfo.Column }}
for key, val := range {{ expr .Map }} {
	key := key
	val := val
	{{ $t }} := new({{ template "task" }})
	{{ $t }}.fn = func(ctx {{ $context }}.Context) (err error) {
		defer func() {
			recovered := recover()
			if recovered != nil {
				{{ template "panicError" }}
			}
		}()

		{{ if .Function.HasError }} err = {{ end }}{{ template "callMap" . }}
		return
	}

	{{ if .MapEndFn -}}
		{{ $t }}Jobs = append({{ $t }}Jobs,
	{{- end -}}
		sched.Enqueue(ctx, {{ $cff }}.Job{
			Run: {{ $t }}.fn,
		})
	{{- if .MapEndFn }} ) {{ end }}
}

{{ with .MapEndFn -}}
	sched.Enqueue(ctx, {{ $cff }}.Job{
		Dependencies: {{ $t }}Jobs,
		Run: func(ctx {{ $context }}.Context) (err error) {
			defer func() {
				recovered := recover()
				if recovered != nil {
					{{ template "panicError" }}
				}
			}()

			{{ if .HasError }} err = {{ end }} {{ template "callFunc" . }}
			return
		},
	})
{{ end }}

{{- define "callMap" -}}
	{{- expr .Function.Node }}({{- if .Function.WantCtx }}ctx,{{ end }} key, val)
{{- end -}}

{{- /* vim:set ft=gotexttmpl noet: */ -}}
