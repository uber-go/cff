{{ with magic }} {{ . }} {{ end }}
{{- $context := import "context" -}}
{{- $cff := import "go.uber.org/cff" -}}
{{- $flow := .Flow -}}
{{- with .Flow -}}
	{{- /*
	   In support of calling user provided expression in the order they were
	   provided, this partial template will completed after it is rendered.
	*/ -}}

	ctx := {{ expr .Ctx }}
	{{- range .Inputs }}
		var v{{ typeHash .Type }} {{ type .Type }} = {{ expr .Node }}
	{{- end }}
	emitter := {{ template "buildEmitter" $flow }}

	var (
		flowInfo = &{{ $cff }}.FlowInfo{
			{{ with $flow.Instrument -}}
				Name: {{ expr .Name }},
			{{ end -}}
			File: {{ quote $flow.PosInfo.File}},
			Line: {{ $flow.PosInfo.Line }},
			Column: {{ $flow.PosInfo.Column}},
		}
		{{ if $flow.Instrument -}}
			flowEmitter = emitter.FlowInit(flowInfo)
		{{- else -}}
			flowEmitter = {{ $cff }}.NopFlowEmitter()
		{{- end }}

		schedInfo = &{{ $cff }}.SchedulerInfo{
			Name: flowInfo.Name,
			Directive: {{ $cff }}.FlowDirective,
			File: flowInfo.File,
			Line: flowInfo.Line,
			Column: flowInfo.Column,
		}

		// possibly unused
		_ = flowInfo
	)

	startTime := {{ import "time" }}.Now()
	defer func() { flowEmitter.FlowDone(ctx, time.Since(startTime)) }()

	schedEmitter := emitter.SchedulerInit(schedInfo)

	sched := {{ $cff }}.NewScheduler(
		{{ $cff }}.SchedulerParams{
			{{ with .Concurrency -}} Concurrency: {{ expr . }}, {{ end -}}
			Emitter: schedEmitter,
		},
	)

	var tasks []*{{ template "task" }}
	defer func() {
		for _, t := range tasks {
			if !t.ran.Load() {
				t.emitter.TaskSkipped(ctx, err)
			}
		}
	}()

	{{ range $flow.TopoFuncs }}
		{{ template "func.go.tmpl" . }}
	{{ end }}

	if err := sched.Wait(ctx); err != nil {
		flowEmitter.FlowError(ctx, err)
		return err
	}

	{{ range .Outputs }}
		*({{ expr .Node }}) = v{{ typeHash .Type }} // {{ typeName .Type }}
	{{- end }}

	flowEmitter.FlowSuccess(ctx)
	return nil
{{- end -}}

{{- /* vim:set ft=gotexttmpl noet: */ -}}
