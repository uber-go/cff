{{- $context := import "context" -}}
{{- $cff := import "go.uber.org/cff" -}}
{{- $p := printf "pred%d" .Serial -}}

// {{ .PosInfo.File }}:{{ .PosInfo.Line }}:{{ .PosInfo.Column }}
var p{{ predHash . }} bool
var p{{ predHash . }}PanicRecover interface{}
var p{{ predHash . }}PanicStacktrace []byte
_ = p{{ predHash . }}PanicStacktrace  // possibly unused.
{{ $p }} := new({{ template "predicate" }})
{{ $p }}.run = func(ctx {{ $context }}.Context) (err error) {
    defer func() {
	if recovered := recover(); recovered != nil {
	    p{{ predHash . }}PanicRecover = recovered
        p{{ predHash . }}PanicStacktrace = {{ import "runtime/debug" }}.Stack()
	}
    }()
    p{{ predHash . }} = {{ expr .Function.Node }}{{ template "callTaskArgs" . }}
    return nil
}

{{ $p }}.job = sched.Enqueue(ctx, {{ $cff }}.Job{
Run: {{ $p }}.run,
    {{ if .Function.DependsOn -}}
        Dependencies: []*{{ $cff }}.ScheduledJob{
            {{ range .Function.DependsOn -}}
                task{{.Task.Serial}}.job,
            {{ end -}}
        },
    {{- end }}
})

{{- /* vim:set ft=gotexttmpl noet: */ -}}
