{{- $context := import "context" -}}
{{- $cff := import "go.uber.org/cff" -}}
{{- $t := printf "task%d" .Serial -}}

// {{ .PosInfo.File }}:{{ .PosInfo.Line }}:{{ .PosInfo.Column }}
{{ with .Outputs -}}
	var (
		{{ range . -}}
 			v{{ typeHash . }} {{ type . }}
		{{ end }}
	)
{{ end -}}
{{ $t }} := new({{ template "task" }})
{{ $t }}.emitter =
	{{- if .Instrument -}}
		emitter.TaskInit(
			&{{ $cff }}.TaskInfo{
				Name: {{ expr .Instrument.Name }},
				File: {{ quote .PosInfo.File}},
				Line: {{ .PosInfo.Line }},
				Column: {{ .PosInfo.Column}},
			},
			&{{ $cff }}.DirectiveInfo{
			   Name: flowInfo.Name,
			   Directive: {{ $cff }}.FlowDirective,
			   File: flowInfo.File,
			   Line: flowInfo.Line,
			   Column: flowInfo.Column,
			},
		)
	{{- else -}}
		{{ $cff }}.NopTaskEmitter()
	{{- end }}
{{ $t }}.run = func(ctx {{ $context }}.Context) (err error) {
	taskEmitter := {{ $t }}.emitter
	startTime := {{ import "time" }}.Now()
	defer func() {
		if {{ $t }}.ran.Load() {
			taskEmitter.TaskDone(ctx, time.Since(startTime))
		}
	}()

	defer func() {
		recovered := recover()
		{{- if .Predicate }}
			{{ if not .FallbackWith -}}
			var stacktrace string
			if recovered != nil {
				stacktrace = string({{ import "runtime/debug" }}.Stack())
			}
			{{- end }}
			if recovered == nil && p{{ predHash .Predicate }}PanicRecover != nil {
				recovered = p{{ predHash .Predicate }}PanicRecover
				{{ if not .FallbackWith -}}
				stacktrace = p{{ predHash .Predicate }}PanicStacktrace
				{{- end }}
			}
		{{- end }}
		if recovered != nil {
		{{ if .FallbackWith -}}
			taskEmitter.TaskPanicRecovered(ctx, recovered)
			{{ template "taskResultList" . }} = {{ range $i, $v := .FallbackWithResults -}}
				{{ if gt $i 0 }},{{ end }}{{ expr $v }}
			{{- end }}{{ if gt (len .FallbackWithResults) 0 }}, {{ end }} nil
		{{- else -}}
			taskEmitter.TaskPanic(ctx, recovered)
			{{ if .Predicate -}}
			err = &{{ $cff }}.PanicError{
				Value:      recovered,
				Stacktrace: stacktrace,
			}
			{{- else -}}
			{{ template "panicError" }}
			{{- end }}
		{{- end }}
		}
	}()

	{{ if .Predicate }}
		if !p{{ predHash .Predicate }} {
			return nil
		}
	{{ end }}

	defer {{ $t }}.ran.Store(true)

	{{ template "taskResultList" . }}{{ if or .Function.HasError (len .Outputs) }} = {{ end }}{{ expr .Function.Node }}{{ template "callTaskArgs" . }}

	{{ if .Function.HasError -}}
		if err != nil {
			{{- if .FallbackWith -}}
				taskEmitter.TaskErrorRecovered(ctx, err)
				{{ template "taskResultList" . }} = {{ range $i, $v := .FallbackWithResults -}}
					{{ if gt $i 0 }},{{ end }}{{ expr $v }}
				{{- end }}{{ if gt (len .FallbackWithResults) 0 }}, {{ end }} nil
			{{- else -}}
				taskEmitter.TaskError(ctx, err)
				return err
			{{- end }}
		} else {
			taskEmitter.TaskSuccess(ctx)
		}
	{{- else -}}
		taskEmitter.TaskSuccess(ctx)
	{{- end }}

	return
}

{{ $t }}.job = sched.Enqueue(ctx, {{ $cff }}.Job{
    Run: task{{ .Serial }}.run,
    {{ if .Function.DependsOn -}}
        Dependencies: []*{{ $cff }}.ScheduledJob{
            {{ range .Function.DependsOn -}}
			    {{ template "dependencies" . }}
            {{ end -}}
        },
    {{- end }}
})
tasks = append(tasks, task{{ .Serial }})

{{- define "dependencies" -}}
	{{- if .Predicate -}}
		pred{{ .Predicate.Serial }}.job,
	{{- else -}}
		task{{ .Task.Serial }}.job,
	{{- end -}}
{{- end -}}

{{- define "taskResultList" -}}
	{{- range $i, $t := .Outputs -}}
		{{ if gt $i 0 }},{{ end }}v{{ typeHash $t }}
	{{- end }}{{ if .Function.HasError }}{{ if len .Outputs }}, {{ end }}err{{ end }}
{{- end -}}

{{- /* vim:set ft=gotexttmpl noet: */ -}}
